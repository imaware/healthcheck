name: Staging Deploy

on:
  release:
    types:
      - created

jobs:
  stagingDocker:
    permissions:
      contents: 'read'
      id-token: 'write'
    name: Build and Deploy Staging
    runs-on: ubuntu-latest
    if: contains(github.ref, 'staging') == true
    environment: 
      name: staging
    env:
      GITHUB_SHA: ${{ github.sha }}
      GITHUB_REF: ${{ github.ref }}
      IMAGE: imaware-non-prod/healthcheck
      APP_NAME: healthcheck
      REGISTRY_HOSTNAME: gcr.io
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0'
      with:
        workload_identity_provider: 'projects/658876781324/locations/global/workloadIdentityPools/gh-actions-pool-staging/providers/gh-actions-staging-provider'
        service_account: 'gh-staging-oidc-sa@imaware-non-prod.iam.gserviceaccount.com'

    # Setup gcloud CLI
    - name: Set up GCP Cloud SDK
      uses: google-github-actions/setup-gcloud@v0

    - run: |
        gcloud auth configure-docker

    # Build the Docker image
    - name: Build
      run: |
        export TAG=`echo $GITHUB_REF | awk -F/ '{print $NF}'`
        echo $TAG
        docker build -t "$REGISTRY_HOSTNAME"/"$IMAGE":"$TAG" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |
        export TAG=`echo $GITHUB_REF | awk -F/ '{print $NF}'`
        echo $TAG
        docker push "$REGISTRY_HOSTNAME"/"$IMAGE":"$TAG"
        docker tag "$REGISTRY_HOSTNAME"/"$IMAGE":"$TAG" "$REGISTRY_HOSTNAME"/"$IMAGE":"$GITHUB_SHA"
        docker push "$REGISTRY_HOSTNAME"/"$IMAGE":"$GITHUB_SHA"
        docker tag "$REGISTRY_HOSTNAME"/"$IMAGE":"$TAG" "$REGISTRY_HOSTNAME"/"$IMAGE":latest
        docker push "$REGISTRY_HOSTNAME"/"$IMAGE":latest

    - uses: clowdhaus/argo-cd-action/@main
      env:
        GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
      with:
        command: app
        options: set ${{ env.APP_NAME }} -p image.tag=${{ env.GITHUB_SHA }} --auth-token ${{ secrets.STAGING_ARGO_TOKEN }} --server ${{ secrets.STAGING_ARGO_SERVER }}